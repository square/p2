// Code generated by protoc-gen-go.
// source: pkg/grpc/kpstore/protos/kpstore.proto
// DO NOT EDIT!

/*
Package kpstore is a generated protocol buffer package.

It is generated from these files:
	pkg/grpc/kpstore/protos/kpstore.proto

It has these top-level messages:
	SetPodRequest
	SetPodResponse
	GetPodRequest
	GetPodResponse
*/
package kpstore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PodPrefix int32

const (
	PodPrefix_unknown PodPrefix = 0
	PodPrefix_intent  PodPrefix = 1
	PodPrefix_reality PodPrefix = 2
	PodPrefix_hooks   PodPrefix = 3
)

var PodPrefix_name = map[int32]string{
	0: "unknown",
	1: "intent",
	2: "reality",
	3: "hooks",
}
var PodPrefix_value = map[string]int32{
	"unknown": 0,
	"intent":  1,
	"reality": 2,
	"hooks":   3,
}

func (x PodPrefix) String() string {
	return proto.EnumName(PodPrefix_name, int32(x))
}
func (PodPrefix) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SetPodRequest struct {
	PodPrefix PodPrefix `protobuf:"varint,1,opt,name=pod_prefix,json=podPrefix,enum=kpstore.PodPrefix" json:"pod_prefix,omitempty"`
	NodeName  string    `protobuf:"bytes,2,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	Manifest  string    `protobuf:"bytes,3,opt,name=manifest" json:"manifest,omitempty"`
}

func (m *SetPodRequest) Reset()                    { *m = SetPodRequest{} }
func (m *SetPodRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPodRequest) ProtoMessage()               {}
func (*SetPodRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SetPodRequest) GetPodPrefix() PodPrefix {
	if m != nil {
		return m.PodPrefix
	}
	return PodPrefix_unknown
}

func (m *SetPodRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *SetPodRequest) GetManifest() string {
	if m != nil {
		return m.Manifest
	}
	return ""
}

type SetPodResponse struct {
	Duration int64 `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"`
}

func (m *SetPodResponse) Reset()                    { *m = SetPodResponse{} }
func (m *SetPodResponse) String() string            { return proto.CompactTextString(m) }
func (*SetPodResponse) ProtoMessage()               {}
func (*SetPodResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SetPodResponse) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type GetPodRequest struct {
	PodPrefix PodPrefix `protobuf:"varint,1,opt,name=pod_prefix,json=podPrefix,enum=kpstore.PodPrefix" json:"pod_prefix,omitempty"`
	NodeName  string    `protobuf:"bytes,2,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	PodId     string    `protobuf:"bytes,3,opt,name=pod_id,json=podId" json:"pod_id,omitempty"`
}

func (m *GetPodRequest) Reset()                    { *m = GetPodRequest{} }
func (m *GetPodRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPodRequest) ProtoMessage()               {}
func (*GetPodRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetPodRequest) GetPodPrefix() PodPrefix {
	if m != nil {
		return m.PodPrefix
	}
	return PodPrefix_unknown
}

func (m *GetPodRequest) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *GetPodRequest) GetPodId() string {
	if m != nil {
		return m.PodId
	}
	return ""
}

type GetPodResponse struct {
	Manifest string `protobuf:"bytes,1,opt,name=manifest" json:"manifest,omitempty"`
	Duration int64  `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"`
}

func (m *GetPodResponse) Reset()                    { *m = GetPodResponse{} }
func (m *GetPodResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPodResponse) ProtoMessage()               {}
func (*GetPodResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetPodResponse) GetManifest() string {
	if m != nil {
		return m.Manifest
	}
	return ""
}

func (m *GetPodResponse) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func init() {
	proto.RegisterType((*SetPodRequest)(nil), "kpstore.SetPodRequest")
	proto.RegisterType((*SetPodResponse)(nil), "kpstore.SetPodResponse")
	proto.RegisterType((*GetPodRequest)(nil), "kpstore.GetPodRequest")
	proto.RegisterType((*GetPodResponse)(nil), "kpstore.GetPodResponse")
	proto.RegisterEnum("kpstore.PodPrefix", PodPrefix_name, PodPrefix_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KPStore service

type KPStoreClient interface {
	// Gets the pod manifest that should be running for a particular node
	GetPod(ctx context.Context, in *GetPodRequest, opts ...grpc.CallOption) (*GetPodResponse, error)
	// Sets a pod manifest to run on a particular node.
	SetPod(ctx context.Context, in *SetPodRequest, opts ...grpc.CallOption) (*SetPodResponse, error)
}

type kPStoreClient struct {
	cc *grpc.ClientConn
}

func NewKPStoreClient(cc *grpc.ClientConn) KPStoreClient {
	return &kPStoreClient{cc}
}

func (c *kPStoreClient) GetPod(ctx context.Context, in *GetPodRequest, opts ...grpc.CallOption) (*GetPodResponse, error) {
	out := new(GetPodResponse)
	err := grpc.Invoke(ctx, "/kpstore.KPStore/GetPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kPStoreClient) SetPod(ctx context.Context, in *SetPodRequest, opts ...grpc.CallOption) (*SetPodResponse, error) {
	out := new(SetPodResponse)
	err := grpc.Invoke(ctx, "/kpstore.KPStore/SetPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KPStore service

type KPStoreServer interface {
	// Gets the pod manifest that should be running for a particular node
	GetPod(context.Context, *GetPodRequest) (*GetPodResponse, error)
	// Sets a pod manifest to run on a particular node.
	SetPod(context.Context, *SetPodRequest) (*SetPodResponse, error)
}

func RegisterKPStoreServer(s *grpc.Server, srv KPStoreServer) {
	s.RegisterService(&_KPStore_serviceDesc, srv)
}

func _KPStore_GetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KPStoreServer).GetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kpstore.KPStore/GetPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KPStoreServer).GetPod(ctx, req.(*GetPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KPStore_SetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KPStoreServer).SetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kpstore.KPStore/SetPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KPStoreServer).SetPod(ctx, req.(*SetPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KPStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kpstore.KPStore",
	HandlerType: (*KPStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPod",
			Handler:    _KPStore_GetPod_Handler,
		},
		{
			MethodName: "SetPod",
			Handler:    _KPStore_SetPod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/kpstore/protos/kpstore.proto",
}

func init() { proto.RegisterFile("pkg/grpc/kpstore/protos/kpstore.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x92, 0xdf, 0x4b, 0xfb, 0x30,
	0x14, 0xc5, 0x97, 0x8d, 0x75, 0xeb, 0xfd, 0xb2, 0x51, 0x02, 0x5f, 0x2d, 0xf3, 0x65, 0x14, 0x84,
	0x21, 0xb2, 0xe2, 0x7c, 0xd4, 0xf7, 0x29, 0x82, 0x94, 0xf6, 0x0f, 0x18, 0xd5, 0x64, 0x33, 0xd4,
	0xe6, 0xc6, 0x24, 0xf5, 0x07, 0x3e, 0xfa, 0x8f, 0x4b, 0xdb, 0xb5, 0xb0, 0x0d, 0x7d, 0xf3, 0xad,
	0xe7, 0x9e, 0x9e, 0x9b, 0xcf, 0x09, 0x81, 0x53, 0x95, 0x6d, 0xc2, 0x8d, 0x56, 0x8f, 0x61, 0xa6,
	0x8c, 0x45, 0xcd, 0x43, 0xa5, 0xd1, 0xa2, 0x69, 0xe4, 0xbc, 0x92, 0x74, 0xb0, 0x95, 0xc1, 0x27,
	0x8c, 0x12, 0x6e, 0x23, 0x64, 0x31, 0x7f, 0x29, 0xb8, 0xb1, 0xf4, 0x02, 0x40, 0x21, 0x5b, 0x29,
	0xcd, 0xd7, 0xe2, 0xdd, 0x27, 0x53, 0x32, 0x1b, 0x2f, 0xe8, 0xbc, 0x49, 0x47, 0xc8, 0xa2, 0xca,
	0x89, 0x5d, 0xd5, 0x7c, 0xd2, 0x13, 0x70, 0x25, 0x32, 0xbe, 0x92, 0x69, 0xce, 0xfd, 0xee, 0x94,
	0xcc, 0xdc, 0x78, 0x58, 0x0e, 0xee, 0xd3, 0x9c, 0xd3, 0x09, 0x0c, 0xf3, 0x54, 0x8a, 0x35, 0x37,
	0xd6, 0xef, 0xd5, 0x5e, 0xa3, 0x83, 0x73, 0x18, 0x37, 0x87, 0x1b, 0x85, 0xd2, 0x54, 0x7f, 0xb3,
	0x42, 0xa7, 0x56, 0xa0, 0xac, 0x36, 0xf5, 0xe2, 0x56, 0x07, 0xaf, 0x30, 0x5a, 0xfe, 0x29, 0xea,
	0x7f, 0x70, 0xca, 0x7d, 0x82, 0x6d, 0x41, 0xfb, 0x0a, 0xd9, 0x2d, 0x0b, 0x6e, 0x60, 0xbc, 0x3c,
	0xa0, 0x6c, 0x3b, 0x91, 0xdd, 0x4e, 0xbf, 0x35, 0x38, 0xbb, 0x06, 0xb7, 0xa5, 0xa2, 0xff, 0x60,
	0x50, 0xc8, 0x4c, 0xe2, 0x9b, 0xf4, 0x3a, 0x14, 0xc0, 0x11, 0xd2, 0x72, 0x69, 0x3d, 0x52, 0x1a,
	0x9a, 0xa7, 0xcf, 0xc2, 0x7e, 0x78, 0x5d, 0xea, 0x42, 0xff, 0x09, 0x31, 0x33, 0x5e, 0x6f, 0xf1,
	0x45, 0x60, 0x70, 0x17, 0x25, 0x65, 0x39, 0x7a, 0x05, 0x4e, 0xcd, 0x44, 0x8f, 0xda, 0xc2, 0x3b,
	0x97, 0x33, 0x39, 0x3e, 0x98, 0xd7, 0xf0, 0x41, 0xa7, 0x0c, 0x27, 0xfb, 0xe1, 0xe4, 0x87, 0x70,
	0xb2, 0x17, 0x7e, 0x70, 0xaa, 0x07, 0x74, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x85, 0x72, 0x39,
	0xbf, 0x69, 0x02, 0x00, 0x00,
}
